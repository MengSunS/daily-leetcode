#-----DFS+ memo----
class Solution:
    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -> int:
        
        @functools.lru_cache(None)
        def dfs(i, j):
            if i<0 or j<0:
                return -sys.maxsize
            return max(max(0, dfs(i-1, j-1))+ nums1[i]*nums2[j], dfs(i-1, j), dfs(i, j-1))
    
        return dfs(len(nums1)-1, len(nums2)-1)
    
#-----DFS+memo-----

class Solution:
    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -> int:
        return self.dfs(len(nums1)-1, len(nums2)-1, {}, nums1, nums2)
    
    def dfs(self, i, j, memo, nums1, nums2):
        if (i, j) in memo:
            return memo[(i, j)]
        if i==0 and j==0:
            return nums1[0]*nums2[0]
        if i< 0 or j< 0:
            return -sys.maxsize
        
        ans= max(max(0, self.dfs(i-1, j-1, memo, nums1, nums2))+ nums1[i]*nums2[j], self.dfs(i-1, j, memo, nums1, nums2), self.dfs(i, j-1, memo, nums1, nums2))
        memo[(i, j)]= ans
        return memo[(i, j)]
        
#-------DP---------

class Solution:
    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -> int:
        m, n= len(nums1), len(nums2)
        dp= [[-sys.maxsize]*(n+1) for _ in range(m+1)]
        
        for i in range(1, m+1):
            for j in range(1, n+1):
               
                dp[i][j]= max(nums1[i-1]*nums2[j-1]+ max(0, dp[i-1][j-1]), dp[i-1][j], dp[i][j-1])
        return dp[m][n]

